@model HandyApp.Models.ViewModels.AsignVM


<form>
    <div class="container">
        <div class="form-row">
            <div class="col-md-12">
                <h1 style="margin-top: 24px;">Customer task</h1>
                <a class="btn btn-danger" asp-controller="handy" asp-action="Index" type="button" style="margin-top: 10px;">Back</a>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="form-row">
            <div class="col-md-12">
                <strong style="margin-right: 7px;">Name :</strong><span style="margin-top: 12px;">@Model.Asign.Name</span>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="form-row">
            <div class="col-md-12">
                <strong>Tasks :</strong><span style="margin-left: 12px;">@Model.Asign.Tasks</span>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="form-row">
            <div class="col-md-12">
                <strong>Address :</strong><span style="margin-left: 12px;">@Model.Asign.Address</span>
            </div>
        </div>
    </div>
    <div class="container">
        <div class="form-row">
            <div class="col-md-12">
                <strong>Telephone number :</strong><span style="margin-left: 12px;">@Model.Asign.Telephone</span>
            </div>
        </div>
    </div>
 
    <div style="margin-top: 40px" class="container">
        <div class="form-row">
            <div class="col-md-12">
                <img src="@Model.Asign.ImageUrl" style="width: 30vh; height: 30vh"> 
            </div>
        </div>
    </div>
    
</form>


<div class="container">
<div class="form-row">
    <div class="col-md-6">
        <strong>Map </strong>
    </div>
</div>
</div>

<div style="margin-top: 4px" class="container">
        <div class="form-row">
             <div class="col-md-12">
                 <div id="mapContainer" style="height:40vh; width: auto"></div>
             </div>
          </div>
     </div>

    <button style="margin-top: 10px; margin-left: 15px" class="btn btn-primary" type="button" onclick="mapper()">Show address on map</button>  

    <script>

    function NominatimService() {
        console.log("Nominatim: Creating service helper (in helpers.js)");

        // PRIVATE VARIABLES AND FUNCTIONS - available only to code inside the function

        var queue = [];
        var cache = {};
        var scheduled = null;

        function scheduleRequest(delay) {
            console.log(
                "Nominatim: Processing next request in " + delay + "ms",
                Object.assign({}, queue)
            );
            scheduled = setTimeout(processRequest, delay);
        }

        function safeCallback(item, delay) {
            try {
                // Callback with cached data
                item.callback(cache[item.address]);
            } finally {
                // Schedule next request even if callback fails
                scheduleRequest(delay);
            }
        }

        function processRequest() {
            // Stop if queue is empty
            if (queue.length === 0) {
                console.log("Nominatim: Queue complete");
                scheduled = null;
                return;
            }

            // Get the next item from the queue
            var item = queue.shift();

            // Check for cached data for this address
            if (cache[item.address]) {
                console.log("Nominatim: Data found in cache", cache[item.address]);

                // Callback and schedule the next request immediately as we did not call the API this time
                safeCallback(item, 0);
            } else {
                // Address is not cached so call the OpenStreetMap REST API
                var url =
                    "http://nominatim.openstreetmap.org/search/" +
                    encodeURI(item.address) +
                    "?format=json&countrycodes=gb";

                var onSuccess = function (data) {
                    console.log("Nominatim: Received data from " + url, data);

                    // Cache the response data
                    cache[item.address] = data;

                    // Callback and schedule the next request in 5 seconds time:
                    // This avoids flooding the API and getting locked out. 1 second should be
                    // enough, but if you have several pages open then you need to wait longer
                    safeCallback(item, 5000);
                };

                // Call the OpenStreetMap REST API
                console.log("Nominatim: Sending GET to " + url);
                $.ajax(url, {type: "GET", data: {}, success: onSuccess});
            }
        }

        // PUBLIC FUNCTIONS - available to the view

        // Queued/Cached call to OpenStreetMap REST API
        // address: address string to lookup
        // callback: function to handle the result of the call
        this.get = function (address, callback) {
            // Add the item to the queue
            queue.push({address: address, callback: callback});
            console.log("Nominatim: Queued request", Object.assign({}, queue));

            // Schedule the next request immediately if not already scheduled
            if (!scheduled) scheduleRequest(0);
        };

    }

    var nominatim = new NominatimService();

    //***** CORDS HELPER************END*********///////


    //*************  SETS UP UI FOR MAP ******************///////
    // contains the UI and the MARKER function

    var platform = new H.service.Platform({
        // TODO: Change to your own API key or map will NOT work!
        apikey: "mL1FKMYlCmNANPFKqYDzwvLdKavuUYkjjDl5vm8b70Q",
    });
    // Obtain the default map types from the platform object:
    var defaultLayers = platform.createDefaultLayers();
    // Instantiate (and display) a map object:
    var map = new H.Map(
        document.getElementById("mapContainer"),
        defaultLayers.vector.normal.map,
        {
            zoom: 14,
            center: {lat: 52.5, lng: 13.4},
        }
    );

    // Create the default UI:
    var ui = H.ui.UI.createDefault(map, defaultLayers);
    var mapSettings = ui.getControl("mapsettings");
    var zoom = ui.getControl("zoom");
    var scalebar = ui.getControl("scalebar");
    mapSettings.setAlignment("top-left");
    zoom.setAlignment("top-left");
    scalebar.setAlignment("top-left");
    // Enable the event system on the map instance:
    var mapEvents = new H.mapevents.MapEvents(map);
    // Instantiate the default behavior, providing the mapEvents object:
    new H.mapevents.Behavior(mapEvents);

    var markers = [];

    function centreMap() {


        function onSuccess(position) {
            console.log("Obtained position", position);
            var point = {
                lng: position.coords.longitude,
                lat: position.coords.latitude,
            };
            map.setCenter(point);
        }

        function onError(error) {
            console.error("Error calling getCurrentPosition", error);

            // Inform the user that an error occurred
            alert("Error obtaining location, please try again.");
        }


        navigator.geolocation.getCurrentPosition(onSuccess, onError, {
            enableHighAccuracy: true,
        });
    }
        






    var addy = '@Model.Asign.Address';




        function mapper() {

        
            var svgMarkup = '<svg width="24" height="24" ' +
                'xmlns="http://www.w3.org/2000/svg">' +
                '<rect stroke="white" fill="#1b468d" x="1" y="1" width="22" ' +
                'height="22" /><text x="12" y="18" font-size="12pt" ' +
                'font-family="Arial" font-weight="bold" text-anchor="middle" ' +
                'fill="white">A</text></svg>';


                function onSuccess(data) {

                    var lat = data[0].lat;
                    var lon = data[0].lon;

                    var icon = new H.map.Icon(svgMarkup),
                        coords = {lat: lat, lng: lon},
                        marker = new H.map.Marker(coords, {icon: icon});

                    map.addObject(marker);
                    map.setCenter(coords);

                }
                    
                  
              

               nominatim.get(addy, onSuccess);

            }
  

    
        




    centreMap();

    </script>